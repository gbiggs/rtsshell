#!/usr/bin/env python
# -*- Python -*-
# -*- coding: utf-8 -*-

'''rtsshell

Copyright (C) 2009-2010
    Geoffrey Biggs
    RT-Synthesis Research Group
    Intelligent Systems Research Institute,
    National Institute of Advanced Industrial Science and Technology (AIST),
    Japan
    All rights reserved.
Licensed under the Eclipse Public License -v 1.0 (EPL)
http://www.opensource.org/licenses/eclipse-1.0.txt

File: rtstart.py

Main program file for the rtstart tool.

'''

__version__ = '$Revision: $'
# $Source$


from itertools import chain
from operator import attrgetter
from optparse import OptionParser, OptionError
from os import sep as pathsep
from rtctree.path import parse_path
from rtctree.tree import create_rtctree
from rtsprofile.rts_profile import RtsProfile
import sys

from rtsshell import RTSSHELL_VERSION
from rtsshell.actions import *
from rtsshell.exceptions import RequiredActionFailedError
from rtsshell.options import Options


def check_required_component_actions(rtsprofile):
    checks = []
    # First perform a sanity check of the system.
    # All required components must be present
    for comp in [c for c in rtsprofile.components if c.is_required]:
        checks.append(CheckForRequiredCompAct(pathsep + comp.path_uri,
                                              comp.id, comp.instance_name,
                                              callbacks=[RequiredActionCB()]))
    return checks


def activate_actions(rtsprofile):
    checks = check_required_component_actions(rtsprofile)

    activates = []
    for comp in [c for c in rtsprofile.components if c.is_required]:
        for ec in comp.execution_contexts:
            activates.append(ActivateCompAct(pathsep + comp.path_uri,
                    comp.id, comp.instance_name, ec.id,
                    callbacks=[RequiredActionCB()]))

    for comp in [c for c in rtsprofile.components if not c.is_required]:
        for ec in comp.execution_contexts:
            activates.append(ActivateCompAct(pathsep + comp.path_uri, comp.id,
                                             comp.instance_name, ec.id))

    return checks, activates


def get_action_condition(rtsprofile, action):
    if rtsprofile.activation.targets:
        for c in rtsprofile.activation.targets:
            target = c.target_component
            if target.id == action.ec_id and \
               target.component_id == action.comp_id and \
               target.instance_name == action.instance_name:
                return c
    return None


def condition_action(rtsprofile, action):
    c = get_action_condition(rtsprofile, action)
    if not c:
        return ConditionedAction(action)
    result = ConditionedAction(action, c.sequence)
    return result


def condition_actions(rtsprofile, actions):
    result = [condition_action(rtsprofile, a) for a in actions]
    result.sort(key=attrgetter('seq_id'))
    return result


def make_plan(rtsprofile, actions):
    return condition_actions(rtsprofile, actions)


def print_plan(plan):
    for p in plan:
        print p


def execute_plan(rtctree, plan):
    for a in plan:
        a(rtctree)


def main(argv):
    usage = '''Usage: %prog [options] <RTSProfile specification file>
Start an RT system using an RT system profile specified in XML or YAML.

NOTE: Currently this tool does not support the conditions that can be
specified in the RTSProfile specification.'''
    parser = OptionParser(usage=usage, version=RTSSHELL_VERSION)
    parser.add_option('--dry-run', dest='dry_run', action='store_true',
            default=False,
            help="Print what will be done but don't actually do anything. \
[Default: %default]")
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
            default=False, help='Verbose output. [Default: %default]')

    try:
        options, args = parser.parse_args()
    except OptionError, e:
        print >>sys.stderr, 'OptionError: ', e
        return 1
    Options().verbose = options.verbose

    if not args:
        print >>sys.stderr, usage
        return 1

    # Load the profile
    rtsprofile = RtsProfile(xml_spec_file=args[0])
    # Build a list of actions to perform that will start the system
    checks, activates = activate_actions(rtsprofile)
    plan = make_plan(rtsprofile, activates)
    if options.dry_run:
        for a in checks:
            print a
        print_plan(plan)
    else:
        # Load the RTC Tree, using the paths from the profile
        rtctree = create_rtctree(paths=[parse_path(pathsep + c.path_uri)[0] \
                                        for c in rtsprofile.components])
        try:
            for a in checks:
                a(rtctree)
            execute_plan(rtctree, plan)
        except RequiredActionFailedError, e:
            print e


if __name__ == '__main__':
    sys.exit(main(sys.argv))


# vim: tw=79

