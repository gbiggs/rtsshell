#!/usr/bin/env python
# -*- Python -*-
# -*- coding: utf-8 -*-

'''rtsshell

Copyright (C) 2009-2010
    Geoffrey Biggs
    RT-Synthesis Research Group
    Intelligent Systems Research Institute,
    National Institute of Advanced Industrial Science and Technology (AIST),
    Japan
    All rights reserved.
Licensed under the Eclipse Public License -v 1.0 (EPL)
http://www.opensource.org/licenses/eclipse-1.0.txt

File: rtteardown.py

Main program file for the rtteardown tool.

'''

__version__ = '$Revision: $'
# $Source$


from optparse import OptionParser, OptionError
from os import sep as pathsep
from rtctree.path import parse_path
from rtctree.tree import create_rtctree
from rtsprofile.rts_profile import RtsProfile
import sys

from rtsshell import RTSSHELL_VERSION
from rtsshell.actions import *
from rtsshell.exceptions import RequiredActionFailedError
from rtsshell.options import Options


def disconnect_actions(rtsprofile):
    disconnects = []
    for conn in rtsprofile.data_port_connectors:
        source_comp = rtsprofile.find_comp_by_target(conn.source_data_port)
        source_path = pathsep + source_comp.path_uri
        source_port = conn.source_data_port.port_name
        prefix = source_comp.instance_name + '.'
        if source_port.startswith(prefix):
            source_port = source_port[len(prefix):]
        dest_comp = rtsprofile.find_comp_by_target(conn.target_data_port)
        dest_path = pathsep + dest_comp.path_uri
        dest_port =conn.target_data_port.port_name
        prefix = dest_comp.instance_name + '.'
        if dest_port.startswith(prefix):
            dest_port = dest_port[len(prefix):]
        disconnects.append(OptionalAction(DisconnectPortsAct,
                (source_path, source_port, dest_path, dest_port)))

    for conn in rtsprofile.service_port_connectors:
        source_comp = rtsprofile.find_comp_by_target(conn.source_service_port)
        source_path = pathsep + source_comp.path_uri
        source_port = conn.source_service_port.port_name
        prefix = source_comp.instance_name + '.'
        if source_port.startswith(prefix):
            source_port = source_port[len(prefix):]
        dest_comp = rtsprofile.find_comp_by_target(conn.target_service_port)
        dest_path = pathsep + dest_comp.path_uri
        dest_port = conn.target_service_port.port_name
        prefix = dest_comp.instance_name + '.'
        if dest_port.startswith(prefix):
            dest_port = dest_port[len(prefix):]
        disconnects.append(OptionalAction(DisconnectPortsAct,
                (source_path, source_port, dest_path, dest_port)))
    return disconnects


def main(argv):
    usage = '''Usage: %prog [options] <RTSProfile specification file>
Destroy an RT system using an RT system profile specified in XML or YAML.'''
    parser = OptionParser(usage=usage, version=RTSSHELL_VERSION)
    parser.add_option('--dry-run', dest='dry_run', action='store_true',
            default=False,
            help='Print what will be done but don't actually do anything. \
[Default: %default]')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
            default=False, help='Verbose output. [Default: %default]')

    try:
        options, args = parser.parse_args()
    except OptionError, e:
        print >>sys.stderr, 'OptionError: ', e
        return 1
    Options().verbose = options.verbose

    if not args:
        print >>sys.stderr, usage
        return 1

    # Load the profile
    rtsprofile = RtsProfile(xml_spec_file=args[0])
    # Build a list of actions to perform that will destroy the system
    actions = disconnect_actions(rtsprofile)
    if options.dry_run:
        for a in actions:
            print a
    else:
        # Load the RTC Tree, using the paths from the profile
        rtctree = create_rtctree(paths=[parse_path(pathsep + c.path_uri)[0] \
                                        for c in rtsprofile.components])
        try:
            for a in actions:
                a(rtctree)
        except RequiredActionFailedError, e:
            print e


if __name__ == '__main__':
    sys.exit(main(sys.argv))


# vim: tw=79

